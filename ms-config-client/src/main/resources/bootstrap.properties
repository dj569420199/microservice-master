spring.profiles.active=dev

## 处理中文乱码
server.tomcat.uri-encoding=UTF-8
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true
spring.messages.encoding=UTF-8

spring.application.name=ms-config-client

##client（客户端）向server（服务器）注册服务的配置
#instance.appname:指明注册中的名字
eureka.instance.appname=ms-config-client
#service-url.defaultZone:配置注册中心地址
eureka.client.service-url.defaultZone=http://127.0.0.1:8081/eureka/

##    注意事项
#    1. 在 git 上的配置文件的名字要和 config 的 client 端的 application name 对应；
#
#    2. 在结合 eureka 的场景中，关于 eureka 和 git config 相关的配置要放在 bootstrap.yml 中，
#      否则会请求默认的 config server 配置，这是因为当你加了配置中心，服务就要先去配置中心获取配置，
#      而这个时候，application.yml 配置文件还没有开始加载，而 bootstrap.yml 是最先加载的。


##配置自动刷新
# 在github中配置 Webhook
# 总不能每次改了配置后，就用 postman 访问一下 refresh 接口吧，还是不够方便。 github 提供了一种 webhook 的方式，
# 当有代码变更的时候，会调用我们设置的地址（actuator/refresh），来实现我们想达到的目的。
# 必须保证这个地址是可以被 github 访问到的。如果是内网就没办法了。一般公司内的项目都会有自己的代码管理工具，
# 例如自建的 gitlab，gitlab 也有 webhook 的功能，这样就可以调用到内网的地址了。

#使用 Spring Cloud Bus 来自动刷新多个端
# 如果只有一个 client 端的话，那我们用 webhook ，设置手动刷新都不算太费事，但是如果端比较多的话呢，
# 一个一个去手动刷新未免有点复杂。这样的话，我们可以借助 Spring Cloud Bus 的广播功能，让 client 端都订阅配置更新事件，
# 当配置更新时，触发其中一个端的更新事件，Spring Cloud Bus 就把此事件广播到其他订阅端，以此来达到批量更新。